# .github/workflows/databricks_ci.yml

name: Databricks CI - Deploy and Test on Dev

# 언제 이 워크플로우를 실행할 것인가?
# main 브랜치에 push가 일어날 때
on:
  push:
    branches:
      - main

jobs:
  # 'dev' 환경에 배포하고 테스트하는 잡
  deploy-to-dev:
    runs-on: ubuntu-latest # 실행 환경
    environment: dev       # 이 잡이 'dev' 환경에 대한 것임을 명시

    steps:
      # 1. Git 저장소의 코드를 가져옴
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Databricks CLI 설치 (Bundle 기능을 사용하기 위해)
      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      # 3. Databricks Bundle 설정 유효성 검사
      - name: Validate Bundle for Dev
        env: # GitHub Secrets에 저장된 인증 정보를 환경 변수로 사용
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
        run: databricks bundle validate --target dev

      # 4. 'dev' 타겟으로 배포
      - name: Deploy Bundle to Dev
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
        run: databricks bundle deploy --target dev

      # 5. 배포된 잡을 실행하여 테스트 (가장 중요한 검증 단계!)
      - name: Run Job on Dev for Testing
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
        run: databricks bundle run main_job --target dev # yml에 정의한 잡 리소스 이름
